vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class((my_vector))
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE)
my_matrix2
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Domarad", "Lubomira", "Drogostan", "Uniegosta")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("pacjent", "wiek", "waga", "MCV", "MCH", "MCHC")
colnames(my_data) <- cnames
my_data
TRUE & c(TRUE, FALSE, FALSE
)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
isTrue(6>4)
isTRUE(6>4)
identical('foo', 'foo')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints > 7)
any(ints < 0)
all(ints > 0)
ok
3
c(1,2,3)
c(1,2,3) = a
a = c(1,2,3)
a
dim(a) <- 2
dim(a) <- c(2,2)
a = c(1,2,3,4)
dim(a) <- c(2,2)
a
a[1]
a[[1]]
a[[1,]]
a[1,]
a[1,1]
a[[1,1]]
x <- list(foo = 1:4, bar = 0.6)
x
parzyste <- function(x){
x%%2
debugSource("C:/Users/Jasku/Desktop/RProject.R")
parzyste <- function(x){
x%%2
parzyste <- function(x){
x%%2
parzyste(c(1,2,3))
source("C:/Users/Jasku/Desktop/RProject.R")
source("C:/Users/Jasku/Desktop/RProject.R")
parzyste(c(1,2,3))
parzyste <- function(x){
x%%2
}
parzyste(c(1,2,3))
c(1,2,)
;
parzyste <- function(x){
x%%2
}
parzyste(c(1,2,3))
a <-1
a
parzyste(c(1,2,3))
parzyste(3)
x%%2 == 0
parzyste <- function(x){
x%%2 == 0
}
a
debugSource("C:/Users/Jasku/Desktop/RProject.R")
parzyste(3)
swirl()
library(swirl.pl)
swirl()
Sys.Date()
mean()
mean(c(2,4,5))
submit()
boring_function('Moja pierwsza funkcja!')
boring_function
submit()
my_mean(c(4,5,10))
submit(0)
submit()
submit(3)
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(
)
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste()
?paste
paste("R", "jest", "gites!")
submit()
telegram(1,2,4)
submit()
submit()
submit()
mad_libs()
mad_libs(1,23)
mad_libs(place = 1,23)
submit()
'Ja' %p% 'uwielbiam' %p% 'CiÄ™!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
aapply(flags, class)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, sum)
class(sapply(flag_colors, sum))
class(sapply(flag_colors, avg))
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
landmass
table(flags$landmass)
flags$animate
table(flags$animate)
table
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,
|  summary)
tapply(flags$population, flags$red, summary)
tapply(flags$animate, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol((plants))
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, REPLACE = TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(1, n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5,10)
replicate(100, rpois(5, 10)
;
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10)
)
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
dq
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time(0)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
t1
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(t1)
quarters(t2)
t3<- "listopad 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl.pl)
install_from_swirl("Przetwarzanie_danych")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
head(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(x:size))
select(cran, -x:-size)
select(cran, -time)
select(cran, -5:20)
select(cran, -5:10)
select(cran, -5:10)
select(cran, -x:size)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country =="US" | country == "IN")
filter(cran, size >100500 | r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, r_version)
filter(cran, r_version != NA)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country , desc(r_version ), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cron
cran
?group_by()
?group_by
by_package <- group_by(cran, package )
by_package
summarize(cran, mean(size))
summarize(cran, by_package = T, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
PACK_SUM
pack_sum
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(tyop_counts, desc())
top_counts_sorted <- arrange(tyop_counts, desc(counts))
top_counts_sorted <- arrange(top_counts, desc(counts))
top_counts_sorted <- arrange(top_counts)
top_counts_sorted <- arrange(top_counts, desc(counts))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique( > 465))
filter(pack_sum, unique > 465))
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(count))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
View(World_Development_Indicators)
World_Development_Indicators <- read_excel("Data pack/World_Development_Indicators.xlsx")
library(EDAWR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(readxl)
World_Development_Indicators <- read_excel("Data pack/World_Development_Indicators.xlsx")
library(readxl)
World_Development_Indicators <- read_excel("Data pack/World_Development_Indicators.xlsx")
ls
rm
dir()
World_Development_Indicators <- read_excel("C:\Users\Jasku\Desktop\ZED\Lab\Projekt\Data pack/World_Development_Indicators.xlsx")
World_Development_Indicators <- read_excel("C:\Users\Jasku\Desktop\ZED\Lab\Projekt\Data pack\World_Development_Indicators.xlsx")
World_Development_Indicators <- read_excel("C:/Users/Jasku/Desktop/ZED/Lab/Projekt/Data pack/World_Development_Indicators.xlsx")
View(World_Development_Indicators)
library(ggplot2)
ggplot(diamonds, aes(carat, price, color=price)) +
;
df <- as.data.frame((Titanic))
ggplot(df, aes(Survived))
ggplot(df, aes(x = survived, y=frequency()))
head(df)
ggplot(df, aes(x = Survived, y=Freq)
)
ggplot(df, aes(x = Survived, y=Freq, color = Sex)
)
ggplot(df, aes(Survived))
ggplot(df, aes(x = Survived, y=Freq, color = Sex) + geom_histogram()
)
ggplot(df, aes(x = Survived, y=Freq, color = Sex) + geom_histogram()
)
ggplot(df, aes(x = Survived, y=Freq, color = Sex)) + geom_histogram()
ggplot(df, aes(Survived) + geom_histogram()
)
ggplot(df, aes(Survived)) + geom_histogram()
ggplot(df, aes(Survived)) + geom_histogram()
ggplot(df, aes(Survived)) +
geom_histogram(binwidth = 0.2)
ggplot(df, aes(Survived)) +
geom_histogram()
ggplot(df, aes(x = Survived)) +
geom_histogram()
ggplot(df, aes(x = Survived, y=Freq, fill = Sex)) + geom_histogram()
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_histogram()
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_bar())
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_bar()
ggplot(df, aes(x = Survived, y = Freq, fill = Sex)) + geom_bar()
ggplot(df, aes(x = Survived, y = Freq, fill = Sex)) + geom_bar(())
ggplot(df, aes(x = Survived, y = Freq, fill = Sex)) + geom_bar(()
ggplot(df, aes(x = Survived, y = Freq, fill = Sex)) + geom_bar(()
ggplot(df, aes(x = Survived, y = Freq, fill = Sex)) + geom_bar()
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar()
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar() + ylab("Freq")
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar() + ylab("Freq") + labs("Titanic survivors")
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors")
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(x = Survived, y=Freq, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(x = Survived, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_bar() + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_bar(state="identity") + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
ggplot(df, aes(Survived, Freq, fill = Sex)) + geom_bar(stat="identity") + ylab("Freq") + labs(title ="Titanic survivors") + facet_wrap(~Class)
;
SP_Composite <- read.table("Data pack/S&P Composite.csv", sep = ",",  header = TRUE)
dir()
cd Delll
library(readxl)
SP_Composite <- read.table("C:\Users\Jasku\Desktop\ZED\Lab\Projekt\Data pack/S&P Composite.csv", sep = ",",  header = TRUE)
SP_Composite <- read.table("C:\Users\Jasku\Desktop\ZED\Lab\Projekt\Data pack/S&P Composite.csv", sep = ",",  header = TRUE)
SP_Composite <- read.table("C:\Users\Jasku\Desktop\ZED\Lab\Projekt\Data pack/S&P Composite.csv", sep = ",",  header = TRUE)
setwd("C:\Users\Jasku\Desktop\ZED\Lab\Projekt")
setwd("C:/Users/Jasku/Desktop/ZED/Lab/Projekt")
SP_Composite <- read.table("Data pack/S&P Composite.csv", sep = ",",  header = TRUE)
View(SP_Composite)
Gold_prices <- read.csv("Data pack/Gold prices.csv")
CurrencyExchangeRates <- read.csv("Data pack/CurrencyExchangeRates.csv")
View(Gold_prices)
View(CurrencyExchangeRates)
install.packages("caret")
library(caret)
set.seed(23)
inTraining <-
createDataPartition(
# atrybut do stratyfikacji
y = Sonar$Class,
# procent w zbiorze uczÄ…cym
p = .75,
# chcemy indeksy a nie listÄ™
list = FALSE)
library(mlbench)
library(mlbench)
install.packages("mlbench")
library(mlbench)
data(Sonar)
inTraining <-
createDataPartition(
# atrybut do stratyfikacji
y = Sonar$Class,
# procent w zbiorze uczÄ…cym
p = .75,
# chcemy indeksy a nie listÄ™
list = FALSE)
training <- Sonar[ inTraining,]
testing  <- Sonar[-inTraining,]
ctrl <- trainControl(
# powtÃ³rzona ocena krzyÅ¼owa
method = "repeatedcv",
# liczba podziaÅ‚Ã³w
number = 2,
# liczba powtÃ³rzeÅ„
repeats = 5)
set.seed(23)
fit <- train(Class ~ .,
data = training,
method = "rf",
trControl = ctrl,
# Paramter dla algorytmu uczÄ…cego
ntree = 10)
fit
`rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Class)`
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Class)`
;
;
a
)
a
a
a
a
a
''
'
``
rfClasses <- predict(fit, newdata = testing)
confusionMatrix(data = rfClasses, testing$Class)
